import json
from typing import Optional, List, Union, Dict

from aws_lambda_typing.events import APIGatewayProxyEventV2

from jit_utils.models.execution import Execution, ExecutionStatus
from jit_utils.models.execution_context import RunnerSetup

from src.lib.data.executions_manager import ExecutionsManager
from tests.mocks.execution_mocks import MOCK_EXECUTION_CODE_EVENT


def _prepare_execution_to_update(
        executions_manager: ExecutionsManager,
        tenant_id: str,
        jit_event_id: str,
        execution_id: str,
        status: ExecutionStatus,
        runner_setup: RunnerSetup = None,
        jit_event_name: str = None,
        config: Dict = None,
        has_findings: Optional[bool] = None,
) -> Execution:
    execution: Execution = MOCK_EXECUTION_CODE_EVENT.copy()
    execution.tenant_id = tenant_id
    execution.jit_event_id = jit_event_id
    execution.execution_id = execution_id
    execution.status = status
    execution.context.job.runner.setup = runner_setup
    execution.has_findings = has_findings

    if jit_event_name:
        execution.jit_event_name = jit_event_name
        execution.context.jit_event.jit_event_name = jit_event_name
    execution.context.config = config if config else execution.context.config

    executions_manager.create_execution(execution)
    return execution


def _prepare_execution_register_event(tenant_id, jit_event_id, execution_id):
    return get_handler_event(
        tenant_id=tenant_id,
        body={
            "tenant_id": tenant_id,
            "vendor": "github",
            "app_and_installation_id": "142441/27511790",
            "app_id": "142441",
            "installation_id": "27511790",
            "account_id": None,
            "account_name": None,
            "branch": "george/js-195-undefined-on-userprofile-removal-page",
            "commits": {
                "base_sha": "11112b6e0cccc0b84a9b106178f0517c444432340",
                "head_sha": "1111233212ccc0b84a9b106178f0517c444432340",
            },
            "pull_request_number": "824",
            "workflow_suite_id": "ec863dbd-7395-473e-b9e2-7ed8eeb0bf56",
            "workflow_id": "4194703357",
            "workflow_name": "Workflows generated by the MVS plan",
            "job_name": "secret-detection",
            "jit_event_id": jit_event_id,
            "jit_event_name": "pull_request_created",
            "execution_id": execution_id,
            "user_vendor_id": "73396808",
            "user_vendor_name": "desiprisg",
            "callback_urls": {
                "execution": "https://api.jit.io/execution",
                "presigned_logs_upload_url": "",
                "presigned_findings_upload_url": "",
                "ignores": "",
                "finding_schema": "https://api.jit.io/finding/schema/{schema_type}/version/{schema_version}",
            },
            "callback_token": "",
            "asset_type": "repo",
            "asset_id": "452c9928-0db3-42f8-b8fa-845482b23df3",
            "inputs": None,
            "control_timeout_seconds": 900,
            "feature_flags_api_key": "",
            "control_type": "detection",
            "centralized_repo_asset_name": ".jit",
            "run_id": "4194703357",
            "status": "running",
        }
    )


def _prepare_job_start_event(
        tenant_id,
        jit_event_id,
        execution_id,
        vendor_job_id: Optional[str] = None) -> APIGatewayProxyEventV2:
    payload = {
        "tenant_id": tenant_id,
        "jit_event_id": jit_event_id,
        "execution_id": execution_id,
    }
    if vendor_job_id:
        payload["vendor_job_id"] = vendor_job_id

    return get_handler_event(
        tenant_id=tenant_id,
        body=payload
    )


def _mock_events_client(mocker):
    class EventsClientMock:
        def put_event(self, source: str, bus_name: str, detail_type: str, detail: str):
            pass

    mocker.patch("src.lib.cores.execution_events.get_events_client", return_value=EventsClientMock())


def get_handler_event(
        body: Union[Dict, List] = {}, path_parameters={},
        tenant_id='19881e72-6d3b-49df-b79f-298ad89b8056',
        token=None, query_string_parameters={}, headers={}, event_type=None
):
    event = {
        'httpMethod': 'GET',
        'pathParameters': path_parameters,
        'queryStringParameters': query_string_parameters,
        'requestContext': {
            'authorizer': {
                'tenant_id': tenant_id,
                'token': token,
            }
        },
        'headers': headers,
        'body': json.dumps(body),
        'detail': {
            'body': body,
            'tenant_id': tenant_id,
            'event_type': event_type
        },
    }
    return event
